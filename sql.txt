_____________________________________________________________

CREATE A TABLE (sqlite)

CREATE TABLE table_name(id integer, first_name text, last_name text);

_____________________________________________________________

CONVERT CVS => DB, DB => CVS (sqlite)

.mode list
.separator ,
.import data.cvs table_name

.mode list
.separator ,
.output output_data.cvs
(some select statements)
.exit

_____________________________________________________________

SELECT BASICS


AND		test two or more conditions.

SELECT name , continent FROM world
WHERE area < 2000
AND gdp > 5000000000



IN 		check if item is in a list.

SELECT name, population FROM world
WHERE name IN ('Denmark', 'Finland', 'Norway', 'Sweden')



LIKE		allows pattern matching. % is wildcard.

SELECT name FROM world
WHERE name LIKE 'G%'



BETWEEN		allows range checking (always inclusive).

SELECT name, area/1000 FROM world
WHERE area BETWEEN 207600 AND 244820

_____________________________________________________________

SELECT WITHIN SELECT (Subqueries)


e.g. List each country where the population is larger than Russia’s:

SELECT name FROM world
WHERE population >
(SELECT population FROM world WHERE name='Russia')



ALL		check a condition over an entire list.

SELECT name FROM world
WHERE gdp >
ALL (SELECT gdp FROM world WHERE continent = 'Europe')

_____________________________________________________________

AGGREGATE FUNCTIONS


SUM		returns the sum of values!

SELECT SUM(population)
FROM world



COUNT		returns the total number of a given value

SELECT COUNT(name) FROM world
WHERE area >= 1000000



DISTINCT	returns only one instance of each value 

SELECT DISTINCT continent FROM world



GROUP BY 	applies SUM and COUNT to groups of values

SELECT continent, SUM(population) FROM world
GROUP BY continent



HAVING		allows you to filter groups displayed

SELECT continent FROM world
GROUP BY continent
HAVING SUM(population)>500000000



ORDER BY	sort results by a given value (lowest to highest)

SELECT id, title, yr
FROM movie
WHERE title LIKE '%Star Trek%'
ORDER BY yr



AVG() - Returns the average value
FIRST() - Returns the first value
LAST() - Returns the last value
MAX() - Returns the largest value
MIN() - Returns the smallest value

_____________________________________________________________

JOIN		combine databases by linking specific columns

SELECT player 
FROM game JOIN goal ON id=matchid

_____________________________________________________________

NULL		null values. cannot use ‘=‘ or ‘!=‘, but rather IS and IS NOT.

SELECT name 
FROM teacher
WHERE dept IS NULL



LEFT JOIN	include rows from the left table even when the linking value is null.

RIGHT JOIN	include rows from the right table even when the linking value is null.




COALESCE	takes any number of arguments and returns the first value that is not null.

SELECT name, COALESCE(mobile, home, ‘no number’)
FROM addresses

_____________________________________________________________

CASE		allows you to test conditions.

SELECT name, population,
       CASE WHEN population<1000000 
            THEN 'small'
            WHEN population<10000000 
            THEN 'medium'
            ELSE 'large'
       END
FROM world
