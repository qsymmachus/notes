ELIXIR
======

Elixir is a functional, concurrent, dynamically typed programming language that runs on
on the Erlang virtual machine (BEAM). Elixir builds on top of Erlang and shares the
same abstractions for building distributed, fault-tolerant applications. Some neat
features of Elixir include:

* Compiles to BEAM bytecode.
* Functional: everything is an expression, recursion over looping, higher-order functions.
* Lightweight concurrency using Erlang's mechanisms.
* Lazy and async collections.
* Pattern matching.

`brew install elixir` to get started.

`iex` runs an Elixir REPL.


BASIC TYPES
-----------

`123`     integers

`3.14`    floats

`true`
`false`

`:foo`     Atoms, similar to Ruby symbols. A constant whose name is its value.
           Modules in Elixir are also atoms (`MyApp.Module`), which is interesting.

`"Apple"`  Strings are always double quoted.


OPERATORS
---------

`+ - * /`          Arithmetic operators. Note that `/` always returns a float.
                   For integer division, use `div()`, for modulo, use `rem()`

`|| && !`          Your standard boolean operators.

`and or not`       Also valid boolean operators, but only if first argument is a
                   boolean. For example: `true and 42`

`== != >= > < <=`  Standard comparison operators.

`=== !===`         For strict comparison of integers and floats. For example,
                   `2 == 2.0` is true, whereas `2 === 2.0` is false.

STRINGS
-------

```
name = "John"      String interpolation.

"Hello, #{name}!"  
```

`"Hello" <> name`  String concatenation.


LISTS
-----

Lists are simple collections of values. They may contain multiple types. They may
contain non-unique values (i.e. they are not sets). Elixir implements lists as 
linked-lists – this means it's faster to prepend than append.

`[123, "Hello", :neat]`

````
"new value" ++ list`     You can concatenate with `++`, either prepending or appending.
list ++ "another!"       It's conventional to describe this function as `++/2`, where
                         `2` is its arity. It's typical to talk about arities in Elixir.
```

```
list -- "Hello"          The `--/2` operator subtracts values from a list, but only the
# returns [123, neat]    first occurence!
```

```
hd list                  `hd` and `tl` give you the head and tail of the list.
# 123

tl list
# ["Hello", :neat]
```

TUPLES
------

Tuples are similar to lists but are stored contiguously in memory. This makes 
accessing their length fast but modification is expensive, because it requires
re-writing the entire tuple to memory.

`{321, "Heya", :cool}`


KEYWORD LISTS
-------------

This is the first type of associative collection in Elixir. It's actually just a 
list of tuples, where the first element in each tuple is an atom, and the second 
element is its value.

```
keylist = [name: "John", age: 30]

# This is really syntactic sugar for:

keylist = [{:name, "John"}, {:age, 30}]
```


MAPS
----

This is the second type of associative collection in Elixir, and is more commonly used
than keyword lists. Unlike keyword lists they allow keys of any type and are un-ordered.

```
map = %{:name => "John", :age => 30}

map[:name]  # "John"
```

If the values are all keys, you can use this special syntax:

```
map = %{name: "John", age: 30}

map.name  # "John"

%{map | name: "Vanya"}  # %{name: "Vanya", age: 30}
```


ENUM
----

The Enum module is the standard library for working with Elixir collections. Here are some
examples:

`Enum.all?(["dog", "cat", "frog"], fn(s) -> String.length(s) == 3 end)  # false`

`Enum.any?(["dog", "cat", "frog"], fn(s) -> String.length(s) == 3 end)  # true`

`Enum.chunk([1, 2, 3, 4], 2)                                            # [[1, 2], [3, 4]]`

`Enum.chunk_by(["dog", "cat", "frog"], fn(s) -> String.length(s) end)   #[["dog, "cat"], ["frog]]` 

```
Enum.each(["hey", "hi", "hello"], fn(s) -> IO.puts(s) end)

# hey
# hi
# hello

# Note that each is side-effecting, but it technically returns the atom :ok.
```

`Enum.map([1, 2, 3], fn(n) -> n * 2 end)                    # [2, 4, 6]`

`Enum.min([1, 2, 3])                                        # 1`

`Enum.max([1, 2, 3])                                        # 3`

`Enum.reduce([1, 2, 3], fn(n, accum) -> n + accum end)      # 6`

`Enum.reduce([1, 2, 3], 10, fn(n, accum) -> n + accum end)  # 16`

`Enum.sort([3, 6, 2])                                       # [2, 3, 6]

```
Enum.sort([%{val: 4}, %{val: 1}], fn(a, b) ->
  a.val < b.val
end)

# [%{val: 1}, %{val: 4}]
```


PATTERN MATCHING
----------------

Pattern matching allows you to match simple values, data structures, and even functions.

In Elixir, `=` is actually a match operator. `x = 1` is an expression that matches the left
side with the right side. The `=` operator performs an assignment when the left side of the 
match includes a variable. You can perform simple matching like this:

```
x = 1
1 = x  # 1
2 = x  # (MatchError) no match of right hand side value: 1
```

More commonly, you can use the `=` operator to match on collections. This allows you to destructure
them, parsing out values from the right side into variables on the left side:

```
# On a list:
[1|tail] = [1, 2, 3]
tail  # [2, 3]

# On a tuple:
{_, data_i_want} = {"foo", "important"}
data_i_want  # "important"
```


IF / ELSE / UNLESS
------------------

`if` and `unless` behave as you'd expect:

```
if true do
  "It's true!"
else
  "I don't know what to believe anymore."
end

unless is_integer("Apple") do
  "It's not an integer."
end
```


CASE STATEMENTS
---------------

Case statements work very similarly to Scala pattern matching. Cases match _values_ to expressions.

```
case {:ok, "Neat data"} do
  {:ok, result} -> result
  {:error} -> "Aw snap!"
  _ -> "Fallback behavior"
end
```

If you intend to match on existing variables, you need to use the pin `^` operator:

```
pie = 3.14

case "cherry pie" do
  ^pie -> "Not so tasty" # i.e. match on existing value of `pie`
  pie -> "I love to eat #{pie}"
end
```

You can also add guards (predicate checks) to your matchers:

```
case [1, 2, 3] do
  [1, x, 3] when x > 0 -> "Yep it's greater than 0"
  _ -> "Nope doesn't match"
end
```

COND STATEMENTS
---------------

`cond` matches to _conditions_ rather than values. In this sense it's very similar to `cond`
in Scheme.

```
cond do
  2 + 2 == 5 -> "This isn't true"
  2 + 2 == 4 -> "This is true"
  true -> "Default case"
end
```


FUNCTIONS
---------

1. Anonymous functions:

```
sum = fun (a, b) -> a + b end

sum.(2, 3)  # 5
```

There's a shorthand for anonymous functions using `&`. `&n` refers to arguments, where `n`
is the position of the argument:

```
sum = &(&1 + &2)

sum.(2, 3)  # 5
```

2. Pattern matching functions:

```
greeter = fn
  "Hi!" -> "Hello!"
  "Salut!" -> "Bonjour!"
  _ -> "No hablo!"
end

greeter.("Guten Tag!")  # "No hablo!"
```

3. Named functions. Named functions are defined within a module using `def`:

```
defmodule Wizard do
  def transfigure(into) do
    "*turns you into a #{into}*"
  end
end

Wizard.transfigure("toad")  # "*turns you into a toad*"
```

One-line functions can be shortened like this:

```
def transfigure(into), do: "*turns you into a #{into}*"
```

4. Using pattern matching, you can define the same function multiple times with slightly different arguments.
This allows you to neatly accomplish some recursive function definitions:

```
defmodule Length do
  def of([]), do: 0
  def of([_|t]), do: 1 + of(t)
end

Length.of([1, 2, 3])  # 3
```

5. Function arities – you can also define functions multiple times with different arities.

```
defmodule Greeter do
  def hello(), do: "Hello, stranger"!
  def hello(first), do: "Hello, #{first}!"
  def hello(first, second), do: "Hello, #{first} #{last}!"
end
```

6. Named functions can be made private within a module using `defp`:

```
defmodule Greeter do
  def hello(first), do: phrase <> name
  defp phrase, do: "Hello, "
end
```

7. Guards (`when`) allow you to define functions multiple times, this time with different validations:

```
defmodule Greeter do
  def hello(names) when is_list(names) do
    names
    |> Enum.join(", ")
    |> hello
  end

  def hello(name) when is_binary(name) do
    "Hello, #{name}!"
  end
end
```

8. Default arguments use slightly wonky syntax:

```
def hello(name \\ "John"), do: "Hello, #{name}!"
```


PIPE OPERATOR
-------------

You've seen the pipe operator `|>` a few times already. It lets you perform function composition, similar to
`andThen` in Scala.

```
"Function composition is cool" |> String.upcase |> String.split |> Enum.map(fn(s) -> String.reverse(s) end)

# "NOITCNUF", "NOITISOPMOC", "SI", "LOOC"]
```


MODULES
-------

1. Modules allow you to organize functions within a namespace. You can also encapsulate private functions
within a module, see the note on `defp` above. Modules can also be nested for more precise namespacing:

```
defmodule Greeter.English do
  def English do
    def morning(name), do: "Good morning, #{name}"
  end
end
```

2. Module attributes are most commonly used as constants in Elixir:

```
defmodule Greeter do
  @greeting "Hello"
end
```


STRUCTS
-------

Structs are special maps with a defined set of keys and default values. They are the "models" of any Elixir
codebase. Structs must be defined within a module:

```
defmodule User do
  defstruct name: "John", age: 30
end
```

Once a struct is defined, you instantiate it like a Map. Structs provide compile-time guarantees that only the 
fields defined in `defstruct` will be allowed to exist:

```
me = %User{}
hank = %User{name: "Hank", age: 1}
```


ALIAS / IMPORT
--------------

`alias` allows you to mixin a module into another module:

```
defmodule Sayings.Greetings do
  def basic(name), do: "Hi, #{name}!"
end

defmodule AdvancedGreetings do
  alias Sayings.Greetings

  def greeting(name), do: Greetings.basic(name) <> " How are you today?"
end
```

You can alias to a different name with the `:as` option:

```
alias Sayings.Greetings, as: Hi
```

`import` allows you to import individual functions rather than aliasing the whole module:

```
import List

# or 

import List, only: [last: 1]

# or

import List, except: [last: 1]
```


MIX AND ELIXIR PROJECTS
-----------------------

Mix is the standard Elixir build tool / task manager / depedency manager.

1. Creating a new project:

```
mix new example_project
```

2. Mix projects use the following structure:

```
.
├── .gitignore
├── README.md
├── config
│   └── config.exs
├── lib
│   └── example_project.ex
├── mix.exs
└── test
    ├── example_project_test.exs
    └── test_helper.exs
```

3. `mix.exs` is your project configuration file. It looks something like this:

```
defmodule Example.Mixfile do
  use Mix.Project
 
  # Project configuration:
  def project do
    [app: :example,
     version: "0.0.1",
     elixir: "~> 1.0",
     build_embedded: Mix.env == :prod,
     start_permanent: Mix.env == :prod,
     deps: deps]
  end

  # Applicaton configuration:
  def application do
    [applications: [:logger]]
  end

  # Dependencies:
  defp deps do
    []
  end
end
```

4. You can run an `iex` REPL with your project and dependencies already loaded by running:

```
iex -S mix
```

5. Mix is smart and will compile your changes automagically, but to explicitly compile:

```
mix compile
```

Compilation creates a _build directory with our artifacts.

6. You manage dependencies by updating the list returned by `deps` in `mix.exs`:

```
 deps do
  [{:phoenix, "~> 1.1 or ~> 1.2"},
   {:phoenix_html, "~> 2.3"},
   {:cowboy, "~> 1.0", only: [:dev, :test]},
   {:slime, "~> 0.14"}]
end
```

To install your dependencies, run:

```
mix deps.get
```

7. To run tests:

```
mix tests
```

