AKKA STREAMS
============

In big data processing, there are two key problems to grapple with:

1. Blocking
  * Some part of the stream is bottle-necking or "blocking" the thread.
  * This may happen if a process is time-consuming, or if it is trying pull data that is not ready or does not exist.

2. Back Pressure
  * Back pressure occurs in "push" based system when a process produces more data that a consumer can handle.

Akka streams attempt to solve these two problems with Sources and Sinks.


SOURCES
-------

A Source is the input to a stream. Sources have only one output, and no input. Sources might be a database or an RPC call, or any other data source.

```
Source(List(1, 2, 3))

Source.single("Only one element")

Source.empty
```


SINKS
-----

While a Source is the start of a stream, a Sink is the endpoint. Sinks have only one input, and no output. Like Sources, Sinks might be a database or an RPC call, or any other data store.

```
Sink.fold[Int, Int](0)(_ + _)

Sink.ignore // consumes the stream and does nothing with it

Sink.foreach[String](println(_))
```


FLOWS
-----

Flows lie between Sources and Sinks and are typically used to perform data transformations. A Flow as a single input and a single output.

SOURCES, SINKS, AND FLOWS ARE FUNCTIONS
---------------------------------------

As one would expect of a stream-based system, Sources, Sinks, and Flows are all functions. They are defined only by whether they have an output (Source), an input (Sink), or both (Flow).


RUNNABLE FLOWS
--------------

When you connect a Source and a Sink, you have created a "Runnable Flow" (represented by the type `RunnableGraph`). Flows may be intermediaries between the Source and Sink, but you must have both a Source and a Sink to create a Runnable Flow. Sources can't run until they're connected to a Sink.

SOURCE ----> FLOW A ----> FLOW B ----> SINK

It is important to note that even after constructing a runnable flow, not data will run through it until it is "materialized" (i.e. run()). Runnable flows are just descriptions of a pipeline; they are materialized when the resources needed to run them are allocated (this usually means starting up Akka Actors, opening files, socket connections, or whatever else the stream needs).

Streams are materialized with "terminal operations" like `run()` and `runWith()`.

```
import akka.stream._
import akka.stream.scaladsl._

// Implicit parameters needed to materialize the stream
implicit val system = ActorSystem("QuickStart")
implicit val materializer = ActorMaterializer()

val source = Source(1 to 10)
val sink = Sink.fold[Int, Int](0)(_ + _)

val sum: Future[Int] = source.runWith(sink)
```

`runWith()` both materializes the stream and returns the value generated by the stream.

Explicitly wiring up a stream:

```
Source(1 to 6).via(Flow[Int}.map(_ * 2)).to(Sink.foreach(println(_)))
```


BACK PRESSURE
-------------

Runnable flows create back pressure by communicating between the Sink and Source. When the sink is ready to accept more data, it sends a request BACKWARD through the runnable flow to Source. The Source will then push a set amount of data forward.

This generates back pressure and ensures that the Source does not send more data than the Sink can process.


SOURCE --(data)--> FLOW A --(data)--> FLOW B --(data)--> SINK
       <--(ok!)--         <--(ok!)--         <--(ok!)--

Back pressure is provided automatically by each component of the stream. It is possible however to add explicit buffers with overflow strategies as well:

```
someSource
  .buffer(10, OverflowStrategy.dropHead
  .map(slowProcess)
  .runWith(Sink.ignore)
```

At a high level, the back pressure protocol is contract between a downstream `Subscriber` and an upstream `Publisher`. A subscriber has a set buffer, called a `demand`. In turn, a Publisher guarantees that it will never emit more elements than a Subscriber's total demand.

How does this work in practice?

1. Slow Publisher, fast Subscriber – the Subscriber repeatedly signals to the Publisher that it's ready for more elements. Since it's signalling faster that the Publisher can publish, we're in so-called "push mode" because the Publisher can freely push elements as fast as it can. 

2. Fast Publisher, slow Subscriber – the Subscriber signals that it's ready for more elements at a slower rate than the Publisher is producing them. We're now in so-called "pull mode" because the Subscriber is now calling the shots, only requesting an element when it's ready. This forces the Publisher to fallback to one of the following strategies to slow the flow of elements:
  * stop generating elements, if it has control over their production,
  * buffer the elements in a _bounded_ manner,
  * drop elements if it exceeds the limits of the buffer,
  * tear down the stream completely if nothing else works.


WHAT ABOUT AKKA?
----------------

How does the Akka actor model fit in all this?

An Akka actor does the following:
  * Encapsulates state
  * Encapsulates behavior
  * Receives messages in a "mailbox" and processes them in order
  * Passes its own messages to other actors
  * Runs on its own thread, asynchronously

Akka streams raise the actor model to a higher level of abstraction.

Each component of an Akka stream uses a _bounded_ mailbox to receive elements.

