a----------DOCKER----------

Docker, a platform for deploying and running applications. Docker provides a way to run an application securely isolated in a container in a way that is platform agnostic. https://docs.docker.com/

BOOT2DOCKER
===========

The Docker Engine uses Linux-specific kernel features, so to run it on OS X we need to use a lightweight virtual machine. To make this process easier, there is a helper application called Boot2Docker that installs the virtual machine and runs the Docker daemon: https://docs.docker.com/installation/mac/


DOCKER ELEMENTS
===============

DOCKER CONTAINER: A Linux Container, (sort of) like a directory, it holds everything needed for an app to run.
  * Docker containers are essentially directories that can be packed (e.g. tar-archived), the shared and run on other hosts. The only dependency is having docker installed on the hosts.
  * Docker containers allow:
    * Application portability,
    * Isolating processes,
    * Preventing access beyond the container's own filesystem,
    * All while being more much lightweight than a virtual machine.
  * When everything is self-contained and the risk of system-level changes are eliminated, the container becomes immune to external exposures which could put it out of order (i.e. 'dependency hell').
  * NB: docker depends on a single process to run. When that process stops, the container stops.


DOCKER IMAGE: read-only template for a docker container.
  * Uses a union file system (UFS) to 'layer' file system branches on top of each other. Every time a change is made to a Docker image, a new layer is created.
  * Docker images are built from a set a steps called instructions. These instructions can be built either by executing commands manually or automatically through Dockerfiles.
  * As more layers (tools, applications, etc.) are added on top of the base, new images can be formed by committing these changes â€“ like a version control system!


DOCKER REGISTRY: private or public stores for docker images. Docker Hub is a public registry.
  * There are a bunch of free docker images for common services! https://registry.hub.docker.com/


DOCKER PARTS
============

DOCKER DAEMON: used to manage local docker containers.

DOCKER CLI: used to command and communicate with the docker daemon.

DOCKER IMAGE INDEX: a repository (public or private) for docker images.


WORKING WITH DOCKER IMAGES
==========================

SEARCH for images. There are many freely available images shared across the docker image index:

docker search [image_name]
docker pull [image_name]


LIST all images on your system:

docker images

# List all containers current running:
docker ps 

# List both running and non-running containers:
docker ps -l


COMMIT an image. As you work with a container and continue to perform actions on it (e.g. download and install software, configure files), to have it keep its state, commit:

sudo docker commit [container ID] [image name]


CREATE a new container (either from an existing image or creating a new one):

docker run [image name] [command to run]
docker run my_image echo 'hello'


RUNNING a container:

docker run [container id]


STOPPING a container:

docker stop [container id]


DELETING a container:

docker rm [container id] 


ATTACHING yourself to a container, i.e. your console will run commands within the container itself:

docker attach [container id]

To 'detach' the current container, type ^+P followed by ^+Q


WORKING WITH A DOCKERFILE
=========================

BUILDING an image from a dockerfile:

docker build -t [name for image] [directory where Dockerfile lives]

This generates a docker image. You create the container from the image with:

docker run [image name] [command to run]

If you want to start an interactive shell within your container:

docker run -i -t [image name] /bin/bash


----------------------------------------------

USEFUL RESOURCES

"How To Install and Use Docker: Getting Started"
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-getting-started

"Docker Explained: How To Containerize and Use Nginx as a Proxy"
https://www.digitalocean.com/community/tutorials/docker-explained-how-to-containerize-and-use-nginx-as-a-proxy

"Deploy Rails Application using Docker"
http://steveltn.me/blog/2014/03/15/deploy-rails-applications-using-docker/



