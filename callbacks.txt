1. Callbacks are functions that are executed asynchronously.

2. Instead of executing top to bottom ('procedurally') like synchronous code, asynchronous code executes different functions are different times based on the order and speed that earlier functions are executed. 

3. This can lead to serious confusion if we think 'procedurally' when we write our code. For example, consider this bit of javascript that parses a number stored in a file using node:

    var fs = require('fs'); 
    var myNumber = undefined; 

    function addOne() {
      fs.readFile('number.txt', function doneReading(err, fileContents) {
        myNumber = parseInt(fileContents);
      })
    }

    addOne();

    console.log(myNumber); // logs out undefined

4. When we run this code, 'myNumber' is undefined, because console.log() has executed before readfile() was done executing. It is NOT running procedurally, waiting for one line to finish before moving on to the next. We can solve this problem with a callback. The callback doesn't know WHEN it will execute, but it knows WHERE it will execute, i.e. in what order relative to other functions

    var fs = require('fs');
    var myNumber = undefined;

    function addOne(callback) {
      fs.readFile('number.txt', function doneReading(err, fileContents) {
        myNumber = parseInt(fileContents);
        callback(); // we know this callback will execute AFTER readFile()
      })
    }

    function logMyNumber() { // defining the callback we'll use
      console.log(myNumber);
    }

    addOne(logMyNumber); // logs out '1000', or whatever 'number.txt' contains

5. Since the crux of node is asynchronous I/O, almost every node function takes a callback. Here is a typical example:

    var fs = require('fs')

    function finishedReading(error, fileData) {
      if (error) throw error
      // do something with the fileData
    }

    fs.readFile('movie.mp4', finishedReading)

