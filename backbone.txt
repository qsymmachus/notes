BACKBONE.JS

A Javascript library for creating client-heavy apps that allow you to route models, collections, and views to a RESTful JSON API.

'MVP' architecture:
- Model
– View: simpler than in MVC, no logic here.
– Presenter: handles all interactions between model and view.

Useful tutorial: https://www.youtube.com/watch?v=FZSjvWtUxYk
                 https://github.com/thomasdavis/backbonetutorials/tree/gh-pages/videos/beginner

------------------------------

THE BIG PICTURE

index.html => Router => Views => Collections/Models => RESTful API

------------------------------

DEPENDENCIES

jQuery
underscore.js
backbone.js (duh)

------------------------------

AJAX PREFILTER

Useful if your RESTful server is external to your client. Automatically filters AJAX requests to prefix with specified URL.

$.ajaxPrefilter(function(options, originalOptions, jqXHR) {
  options.url = "http://restfulservice.com" + options.url;
});

------------------------------

BACKBONE ROUTER

var Router = Backbone.Router.extend({
  routes: {
    '': 'home',
    'new': 'editUser',
    'edit/:id': 'editUser'
  }
});

------------------------------

BACKBONE COLLECTION

var Users = Backbone.Collection.extend({
  url: '/users'
});

------------------------------

BACKBONE MODEL

var User = Backbone.Model.extend({
  urlRoot: '/users' // Backbone knows to append /:id
});

------------------------------

TEMPLATES

These are templates prepared for use with underscores' _.template() function.  
Alternatively, you could use a templating language like moustache: 
https://github.com/janl/mustache.js

<script type="text/template" id="user-list-template">
  <a href='#/new'>New User</a>
  <table>
    <thead>
      <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Age</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <% _.each(users, function(user) { %>
        <td><%= user.get('firstname') %></td>
        <td><%= user.get('lastname') %></td>
        <td><%= user.get('age') %></td>
        <td><a href="#/edit/<%= user.id %>">Edit</a></td
      <% }); %>
    </tbody>
</script> 

<script type="text/template" id="edit-user-template">
  <form class="edit-user-form">
    <legend><%= user ? 'Edit User' : 'Create User' %></legend>
    <label>First Name</label>
    <input type="text" name="firstname" value="<% user ? user.get('firstname') : '' %>/>
    <label>Last Name</label>
    <input type="text" name="lastname" value="<% user ? user.get('lastname') : '' %>/>
    <label>Age</label>
    <input type="text" name="age" value="<% user ? user.get('age') : '' %>/>
    <% if (user) { %>
      <input type="hidden" name="id" value="<%= user.id %>"/>
    <% }; %>
    <button type="submit">Create</button>
  </form>
</script>

------------------------------

BACKBONE VIEW

var UserList = Backbone.View.extend({
  el: '.page', // element within which the view is rendered
  render: function() {
    var that = this; // so we can pass scope to the 'success' function below
    var users = new Users();
    users.fetch({
      success: function(users) {
        var template = _.template($('#user-list-template').html(), {users: users.models});
        that.$el.html(template);
      }
    })
  }
});

var EditUser = Backbone.View.extend({
  el: '.page',
  render: function(options) {
    var that = this; // so we can pass scope to the 'success' function below
    if (options.id) { // render form for existing user
      var user = new User({id: options.id});
      user.fetch({
        success: function(user) {
          var template = _.template($('#edit-user-template').html, {user: user});
          that.$el.html(template);
        }
      })
    } else { // render form for new user 
      var template = _.template($('#edit-user-template').html, {user: null});
      this.$el.html(template);
    }
  },
  events: {
    'submit .edit-user-form': 'saveUser'
  }
  saveUser: function(ev) {
    var userDetails = $(ev.currentTarget).serialize(); // grabbing form data
    var user = new User();
    // Backbone knows whether to 'post' or 'put' depending on whether the
    // form data has an id.
    user.save(userDetails, {
      success: function(user) {
        router.navigate('', {trigger: true}); // redirect back to index
      }
    });
    return false; // prevents event default
  }
})

------------------------------

YOUR INSTANCES

var userList = new UserList();
var editUser = new EditUser();
var router = new Router();

// Route functions:
router.on('route:home', function() {
  userList.render();
});
router.on('route:editUser', function(id) {
  editUser.render({id: id}); // passing /:id to the function if it is defined
});

// This must be started for the router to work
// It listens for url changes
Backbone.history.start();



